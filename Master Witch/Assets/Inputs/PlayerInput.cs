//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""de8f2169-bf2c-4dc0-af66-c9c5743c8416"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d742c150-e7f5-4ce7-bb5f-9a13c5866e63"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2943730b-ad2d-4125-bf92-e01dcf597748"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d463aea3-5806-446f-a2de-0dd65711f8cd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad561aee-00e5-4d15-86c4-271b89dc769c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b575f486-385b-488e-895d-aae2f9bbb580"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df610230-a812-4bfc-81df-4b38a9c00d22"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerInteract"",
            ""id"": ""390c620d-39ed-4cf9-a6ad-18b0e6702a30"",
            ""actions"": [
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""8c131369-2399-4797-bf55-5eafdff9ed7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selected"",
                    ""type"": ""Button"",
                    ""id"": ""c9aec22c-a8f6-447b-bf71-5679b4d7f08b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Storage"",
                    ""type"": ""Button"",
                    ""id"": ""88cb4def-f42b-4b0b-a2bb-3569eeb1d03b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a95909d5-3a12-43a7-a902-561610d15fa4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f41606d-83e9-47a2-8fb8-d84679e44ad1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selected"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""582a5e06-5a35-4503-bb4c-d677c4034732"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Storage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIController"",
            ""id"": ""693c978c-f72b-4b4e-91c2-b14fce461a34"",
            ""actions"": [
                {
                    ""name"": ""DisplayRecipe"",
                    ""type"": ""Button"",
                    ""id"": ""d99fc393-657b-4983-995b-c86d8d08bedd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SuspendRecipe"",
                    ""type"": ""Button"",
                    ""id"": ""202cb826-ddd5-4836-8655-ae60c5d02eb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""40d55604-0773-4cf4-bae6-28f81e056c6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be4557d3-4e83-420f-ab95-f303a5e3b6b7"",
                    ""path"": ""<Keyboard>/#(K)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisplayRecipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39b2a527-5953-4fe3-a026-b0bfd4550db5"",
                    ""path"": ""<Keyboard>/#(I)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SuspendRecipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""090f1643-e7b8-49ae-b176-0466af7d5029"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl
        m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
        m_PlayerControl_Movement = m_PlayerControl.FindAction("Movement", throwIfNotFound: true);
        // PlayerInteract
        m_PlayerInteract = asset.FindActionMap("PlayerInteract", throwIfNotFound: true);
        m_PlayerInteract_Interaction = m_PlayerInteract.FindAction("Interaction", throwIfNotFound: true);
        m_PlayerInteract_Selected = m_PlayerInteract.FindAction("Selected", throwIfNotFound: true);
        m_PlayerInteract_Storage = m_PlayerInteract.FindAction("Storage", throwIfNotFound: true);
        // UIController
        m_UIController = asset.FindActionMap("UIController", throwIfNotFound: true);
        m_UIController_DisplayRecipe = m_UIController.FindAction("DisplayRecipe", throwIfNotFound: true);
        m_UIController_SuspendRecipe = m_UIController.FindAction("SuspendRecipe", throwIfNotFound: true);
        m_UIController_GameMenu = m_UIController.FindAction("GameMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl
    private readonly InputActionMap m_PlayerControl;
    private List<IPlayerControlActions> m_PlayerControlActionsCallbackInterfaces = new List<IPlayerControlActions>();
    private readonly InputAction m_PlayerControl_Movement;
    public struct PlayerControlActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControl_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

    // PlayerInteract
    private readonly InputActionMap m_PlayerInteract;
    private List<IPlayerInteractActions> m_PlayerInteractActionsCallbackInterfaces = new List<IPlayerInteractActions>();
    private readonly InputAction m_PlayerInteract_Interaction;
    private readonly InputAction m_PlayerInteract_Selected;
    private readonly InputAction m_PlayerInteract_Storage;
    public struct PlayerInteractActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerInteractActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interaction => m_Wrapper.m_PlayerInteract_Interaction;
        public InputAction @Selected => m_Wrapper.m_PlayerInteract_Selected;
        public InputAction @Storage => m_Wrapper.m_PlayerInteract_Storage;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteract; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractActionsCallbackInterfaces.Add(instance);
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @Selected.started += instance.OnSelected;
            @Selected.performed += instance.OnSelected;
            @Selected.canceled += instance.OnSelected;
            @Storage.started += instance.OnStorage;
            @Storage.performed += instance.OnStorage;
            @Storage.canceled += instance.OnStorage;
        }

        private void UnregisterCallbacks(IPlayerInteractActions instance)
        {
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @Selected.started -= instance.OnSelected;
            @Selected.performed -= instance.OnSelected;
            @Selected.canceled -= instance.OnSelected;
            @Storage.started -= instance.OnStorage;
            @Storage.performed -= instance.OnStorage;
            @Storage.canceled -= instance.OnStorage;
        }

        public void RemoveCallbacks(IPlayerInteractActions instance)
        {
            if (m_Wrapper.m_PlayerInteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractActions @PlayerInteract => new PlayerInteractActions(this);

    // UIController
    private readonly InputActionMap m_UIController;
    private List<IUIControllerActions> m_UIControllerActionsCallbackInterfaces = new List<IUIControllerActions>();
    private readonly InputAction m_UIController_DisplayRecipe;
    private readonly InputAction m_UIController_SuspendRecipe;
    private readonly InputAction m_UIController_GameMenu;
    public struct UIControllerActions
    {
        private @PlayerInput m_Wrapper;
        public UIControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @DisplayRecipe => m_Wrapper.m_UIController_DisplayRecipe;
        public InputAction @SuspendRecipe => m_Wrapper.m_UIController_SuspendRecipe;
        public InputAction @GameMenu => m_Wrapper.m_UIController_GameMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControllerActions set) { return set.Get(); }
        public void AddCallbacks(IUIControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControllerActionsCallbackInterfaces.Add(instance);
            @DisplayRecipe.started += instance.OnDisplayRecipe;
            @DisplayRecipe.performed += instance.OnDisplayRecipe;
            @DisplayRecipe.canceled += instance.OnDisplayRecipe;
            @SuspendRecipe.started += instance.OnSuspendRecipe;
            @SuspendRecipe.performed += instance.OnSuspendRecipe;
            @SuspendRecipe.canceled += instance.OnSuspendRecipe;
            @GameMenu.started += instance.OnGameMenu;
            @GameMenu.performed += instance.OnGameMenu;
            @GameMenu.canceled += instance.OnGameMenu;
        }

        private void UnregisterCallbacks(IUIControllerActions instance)
        {
            @DisplayRecipe.started -= instance.OnDisplayRecipe;
            @DisplayRecipe.performed -= instance.OnDisplayRecipe;
            @DisplayRecipe.canceled -= instance.OnDisplayRecipe;
            @SuspendRecipe.started -= instance.OnSuspendRecipe;
            @SuspendRecipe.performed -= instance.OnSuspendRecipe;
            @SuspendRecipe.canceled -= instance.OnSuspendRecipe;
            @GameMenu.started -= instance.OnGameMenu;
            @GameMenu.performed -= instance.OnGameMenu;
            @GameMenu.canceled -= instance.OnGameMenu;
        }

        public void RemoveCallbacks(IUIControllerActions instance)
        {
            if (m_Wrapper.m_UIControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControllerActions @UIController => new UIControllerActions(this);
    public interface IPlayerControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractActions
    {
        void OnInteraction(InputAction.CallbackContext context);
        void OnSelected(InputAction.CallbackContext context);
        void OnStorage(InputAction.CallbackContext context);
    }
    public interface IUIControllerActions
    {
        void OnDisplayRecipe(InputAction.CallbackContext context);
        void OnSuspendRecipe(InputAction.CallbackContext context);
        void OnGameMenu(InputAction.CallbackContext context);
    }
}
